# -*- coding: utf-8 -*-
"""Smell Test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JnWNe4qeb1-zSx4UEJaYWxoJyJgIj1kn
"""

#Mount google drive to python so you can import sample data txt file later
from google.colab import drive
drive.mount('/content/drive')

#import numpy and pyplot
import numpy as np
import matplotlib.pyplot as plt


#import sample data using np.loadtxt, create arrays

# Controls
AlexControl = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex Control.csv', delimiter = ',')
AlexControl = AlexControl[0:90]
KaiControl = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai Control.csv', delimiter = ',')
KaiControl = KaiControl[0:90]
HunterControl = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter Control.csv', delimiter = ',')
HunterControl = HunterControl[0:90]
# Dark and Light Room
AlexDark = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex No Light.csv', delimiter = ',')
AlexLight = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex 100% Light.csv', delimiter = ',')
AlexDark = AlexDark[0:90]
AlexLight = AlexLight[0:90]

KaiDark = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai Dark Room.csv', delimiter = ',')
KaiLight = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai 100% Light.csv', delimiter = ',')
KaiDark = KaiDark[0:90]
KaiLight = KaiLight[0:90]

HunterDark = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter Dark Room.csv', delimiter = ',')
HunterLight = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter 100% Light.csv', delimiter = ',')
HunterDark = HunterDark[0:90]
HunterLight = HunterLight[0:90]

# Buzzers

Alex1Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex 1 Buzzer.csv', delimiter = ',')
Alex2Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex 2 Buzzers.csv', delimiter = ',')
Alex1Buzzer = Alex1Buzzer[0:90]
Alex2Buzzer = Alex2Buzzer[0:90]

Kai1Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai 1 Buzzer.csv', delimiter = ',')
Kai2Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai 2 buzzers.csv', delimiter = ',')
Kai1Buzzer = Kai1Buzzer[0:90]
Kai2Buzzer = Kai2Buzzer[0:90]

Hunter1Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter 1 Buzzer.csv', delimiter = ',')
Hunter2Buzzer = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter 2 Buzzers.csv', delimiter = ',')
Hunter1Buzzer = Hunter1Buzzer[0:90]
Hunter2Buzzer = Hunter2Buzzer[0:90]

# Good and Bad Smell

KaiGoodSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Kai Good Smell.csv', delimiter = ',')
KaiBadSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/KAI Bad Smell.csv', delimiter = ',')
KaiGoodSmell = KaiGoodSmell[0:90]
KaiBadSmell = KaiBadSmell[0:90]

AlexGoodSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex Good Smell.csv', delimiter = ',')
AlexBadSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Alex Bad Smell.csv', delimiter = ',')
AlexGoodSmell = AlexGoodSmell[0:90]
AlexBadSmell = AlexBadSmell[0:90]

HunterGoodSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter Good Smell.csv', delimiter = ',')
HunterBadSmell = np.loadtxt('/content/drive/MyDrive/Colab Notebooks/4BLFinal/finalreactiondata/Hunter Bad Smell.csv', delimiter = ',')
HunterGoodSmell = HunterGoodSmell[0:90]
HunterBadSmell = HunterBadSmell[0:90]

# combined arrays
Control = np.concatenate([KaiControl,AlexControl,HunterControl])

Light = np.concatenate([AlexLight,KaiLight, HunterLight ])
Dark = np.concatenate([AlexDark,KaiDark, HunterDark ])

Buzzer1 = np.concatenate([Alex1Buzzer,Kai1Buzzer, Hunter1Buzzer ])
Buzzer2 = np.concatenate([Alex2Buzzer,Kai2Buzzer, Hunter2Buzzer ])

GoodSmell = np.concatenate([KaiGoodSmell,HunterGoodSmell, AlexGoodSmell ])
BadSmell = np.concatenate([AlexBadSmell,HunterBadSmell, KaiBadSmell ])

# mean and standard deviations

# Controls
AlexControl_mean = round(np.mean(AlexControl))
AlexControl_stdev = round(np.std(AlexControl)) * 3

KaiControl_mean = round(np.mean(KaiControl))
KaiControl_stdev = round(np.std(KaiControl)) * 3

HunterControl_mean = round(np.mean(HunterControl))
HunterControl_stdev = round(np.std(HunterControl)) * 3

Control_mean = round(np.mean(Control))
Control_stdev = round(np.std(Control)) * 3

# Dark Rooms
AlexDark_mean = round(np.mean(AlexDark))
AlexDark_stdev = round(np.std(AlexDark)) * 3

KaiDark_mean = round(np.mean(KaiDark))
KaiDark_stdev = round(np.std(KaiDark)) * 3

HunterDark_mean = round(np.mean(HunterDark))
HunterDark_stdev = round(np.std(HunterDark)) * 3

Dark_mean = round(np.mean(Dark))
Dark_stdev = round(np.std(Dark)) * 3

# Light Rooms
AlexLight_mean = round(np.mean(AlexLight))
AlexLight_stdev = round(np.std(AlexLight)) * 3

KaiLight_mean = round(np.mean(KaiLight))
KaiLight_stdev = round(np.std(KaiLight)) * 3

HunterLight_mean = round(np.mean(HunterLight))
HunterLight_stdev = round(np.std(HunterLight)) * 3

Light_mean = round(np.mean(Light))
Light_stdev = round(np.std(Light)) * 3

# 1 Buzzer
Alex1Buzzer_mean = round(np.mean(Alex1Buzzer))
Alex1Buzzer_stdev = round(np.std(Alex1Buzzer)) * 3

Kai1Buzzer_mean = round(np.mean(Kai1Buzzer))
Kai1Buzzer_stdev = round(np.std(Kai1Buzzer)) * 3

Hunter1Buzzer_mean = round(np.mean(Hunter1Buzzer))
Hunter1Buzzer_stdev = round(np.std(Hunter1Buzzer)) * 3

Buzzer1_mean = round(np.mean(Buzzer1))
Buzzer1_stdev = round(np.std(Buzzer1)) * 3


# 2 Buzzer
Alex2Buzzer_mean = round(np.mean(Alex2Buzzer))
Alex2Buzzer_stdev = round(np.std(Alex2Buzzer)) * 3

Kai2Buzzer_mean = round(np.mean(Kai2Buzzer))
Kai2Buzzer_stdev = round(np.std(Kai2Buzzer)) * 3

Hunter2Buzzer_mean = round(np.mean(Hunter2Buzzer))
Hunter2Buzzer_stdev = round(np.std(Hunter2Buzzer)) * 3

Buzzer2_mean = round(np.mean(Buzzer2))
Buzzer2_stdev = round(np.std(Buzzer2)) * 3

# Good Smell
KaiGoodSmell_mean = round(np.mean(KaiGoodSmell))
KaiGoodSmell_stdev = round(np.std(KaiGoodSmell)) * 3

HunterGoodSmell_mean = round(np.mean(HunterGoodSmell))
HunterGoodSmell_stdev = round(np.std(HunterGoodSmell)) * 3

AlexGoodSmell_mean = round(np.mean(AlexGoodSmell))
AlexGoodSmell_stdev = round(np.std(AlexGoodSmell)) * 3

GoodSmell_mean = round(np.mean(GoodSmell))
GoodSmell_stdev = round(np.std(GoodSmell)) * 3

# Bad Smell
KaiBadSmell_mean = round(np.mean(KaiBadSmell))
KaiBadSmell_stdev = round(np.std(KaiBadSmell)) * 3

HunterBadSmell_mean = round(np.mean(HunterBadSmell))
HunterBadSmell_stdev = round(np.std(HunterBadSmell)) * 3

AlexBadSmell_mean = round(np.mean(AlexBadSmell))
AlexBadSmell_stdev = round(np.std(AlexBadSmell)) * 3

BadSmell_mean = round(np.mean(BadSmell))
BadSmell_stdev = round(np.std(BadSmell)) * 3






print("Average Hunter2Buzzer is " + str(Hunter2Buzzer_mean))
print("STD Hunter2Buzzer is " + str(AlexControl_stdev))
print(Hunter1Buzzer_mean)
print(HunterControl_mean)

for i in range(0, 90, 1):
    if AlexControl[i] > AlexControl_mean + AlexControl_stdev:
      AlexControl[i] = AlexControl_mean
    if KaiControl[i] > KaiControl_mean + KaiControl_stdev:
      KaiControl[i] = KaiControl_mean
    if HunterControl[i] > HunterControl_mean + HunterControl_stdev:
      HunterControl[i] = HunterControl_mean

    if AlexDark[i] > AlexDark_mean + AlexDark_stdev:
      AlexDark[i] = AlexDark_mean
    if KaiDark[i] > KaiDark_mean + KaiDark_stdev:
      KaiDark[i] = KaiDark_mean
    if HunterDark[i] > HunterDark_mean + HunterDark_stdev:
      HunterDark[i] = HunterDark_mean

    if HunterLight[i] > HunterLight_mean + HunterLight_stdev:
      HunterLight[i] = HunterLight_mean
    if KaiLight[i] > KaiLight_mean + KaiLight_stdev:
      KaiLight[i] = KaiLight_mean
    if AlexLight[i] > AlexLight_mean + AlexLight_stdev:
      AlexLight[i] = AlexLight_mean

    if Alex1Buzzer[i] > Alex1Buzzer_mean + Alex1Buzzer_stdev:
      Alex1Buzzer[i] = Alex1Buzzer_mean
    if Kai1Buzzer[i] > Kai1Buzzer_mean + Kai1Buzzer_stdev:
      Kai1Buzzer[i] = Kai1Buzzer_mean
    if Hunter1Buzzer[i] > Hunter1Buzzer_mean + Hunter1Buzzer_stdev:
      Hunter1Buzzer[i] = Hunter1Buzzer_mean

    if Alex2Buzzer[i] > Alex2Buzzer_mean + Alex2Buzzer_stdev:
      Alex2Buzzer[i] = Alex2Buzzer_mean
    if Kai2Buzzer[i] > Kai2Buzzer_mean + Kai2Buzzer_stdev:
      Kai2Buzzer[i] = Kai2Buzzer_mean
    if Hunter2Buzzer[i] > Hunter2Buzzer_mean + Hunter2Buzzer_stdev:
      Hunter2Buzzer[i] = Hunter2Buzzer_mean

    if AlexGoodSmell[i] > AlexGoodSmell_mean + AlexGoodSmell_stdev:
      AlexGoodSmell[i] = AlexGoodSmell_mean
    if KaiGoodSmell[i] > KaiGoodSmell_mean + KaiGoodSmell_stdev:
      KaiGoodSmell[i] = KaiGoodSmell_mean
    if HunterGoodSmell[i] > HunterGoodSmell_mean + HunterGoodSmell_stdev:
      HunterGoodSmell[i] = HunterGoodSmell_mean

    if AlexBadSmell[i] > AlexBadSmell_mean + AlexBadSmell_stdev:
      AlexBadSmell[i] = AlexBadSmell_mean
    if KaiBadSmell[i] > KaiBadSmell_mean + KaiBadSmell_stdev:
      KaiBadSmell[i] = KaiBadSmell_mean
    if HunterBadSmell[i] > HunterBadSmell_mean + HunterBadSmell_stdev:
      HunterBadSmell[i] = HunterBadSmell_mean


# controls
for i in range(0, 90 * 3, 1):
    if Control[i] > Control_mean + Control_stdev:
      Control[i] = Control_mean
    if Light[i] > Light_mean + Light_stdev:
      Light[i] = Light_mean
    if Dark[i] > Dark_mean + Dark_stdev:
      Dark[i] = Dark_mean
    if Buzzer1[i] > Buzzer1_mean + Buzzer1_stdev:
      Buzzer1[i] = Buzzer1_mean
    if Buzzer2[i] > Buzzer2_mean + Buzzer2_stdev:
      Buzzer2[i] = Buzzer2_mean
    if GoodSmell[i] > GoodSmell_mean + GoodSmell_stdev:
      GoodSmell[i] = GoodSmell_mean
    if BadSmell[i] > BadSmell_mean + BadSmell_stdev:
      BadSmell[i] = BadSmell_mean

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(AlexControl, alpha = 0.5, color = 'red', density=True, label = 'Alex Control')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')
plt.hist(HunterControl, alpha = 0.5, color = 'purple', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Control Reaction Times")

#Optional: try to add legend to the plot
plt.legend()

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Light, alpha = 0.5, color = 'red', density=True, label = 'Light Room')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times In a Brightly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

alpha = 0.05
lowerindex = 0
upperindex = 90*3

first_data = Control[lowerindex:upperindex]
second_data= Light[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Dark, alpha = 0.5, color = 'red', density=True, label = 'Dark Room')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times In a Darkly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = Control[lowerindex:upperindex]
second_data= Dark[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(GoodSmell, alpha = 0.5, color = 'red', density=True, label = 'Good Smell')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times In a Pleasant Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = Control[lowerindex:upperindex]
second_data= GoodSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(BadSmell, alpha = 0.5, color = 'red', density=True, label = 'Bad Smell')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times In a Foul Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = Control[lowerindex:upperindex]
second_data= BadSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Buzzer2, alpha = 0.5, color = 'red', density=True, label = '2 Buzzers')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times to 2 Buzzers Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = Control[lowerindex:upperindex]
second_data= Buzzer2[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Buzzer1, alpha = 0.5, color = 'red', density=True, label = '1 Buzzer')
plt.hist(Control, alpha = 0.5, color = 'green', density=True, label = 'Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of a Population's Reaction Times to 1 Buzzer Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = Control[lowerindex:upperindex]
second_data= Buzzer1[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(AlexLight, alpha = 0.5, color = 'red', density=True, label = 'Alex Light Room')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times In a Brightly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

upperindex = 90
first_data = AlexControl[lowerindex:upperindex]
second_data= AlexLight[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(AlexDark, alpha = 0.5, color = 'red', density=True, label = 'Alex Dark Room')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times In a Darkly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = AlexControl[lowerindex:upperindex]
second_data= AlexDark[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(AlexGoodSmell, alpha = 0.5, color = 'red', density=True, label = 'Alex Good Smell')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times In a Pleasant Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = AlexControl[lowerindex:upperindex]
second_data= AlexGoodSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(AlexBadSmell, alpha = 0.5, color = 'red', density=True, label = 'Alex Bad Smell')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times In a Foul Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = AlexControl[lowerindex:upperindex]
second_data= AlexBadSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Alex2Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Alex 2 Buzzers')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times to 2 Buzzers Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = AlexControl[lowerindex:upperindex]
second_data= Alex2Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Alex1Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Alex 1 Buzzer')
plt.hist(AlexControl, alpha = 0.5, color = 'green', density=True, label = 'Alex Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Alex's Reaction Times to 1 Buzzer Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = AlexControl[lowerindex:upperindex]
second_data= Alex1Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(KaiLight, alpha = 0.5, color = 'red', density=True, label = 'Kai Light Room')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times In a Brightly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= KaiLight[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(KaiDark, alpha = 0.5, color = 'red', density=True, label = 'Kai Dark Room')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times In a Darkly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= KaiDark[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(KaiGoodSmell, alpha = 0.5, color = 'red', density=True, label = 'Kai Good Smell')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times In a Pleasant Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= KaiGoodSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(KaiBadSmell, alpha = 0.5, color = 'red', density=True, label = 'Kai Bad Smell')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times In a Foul Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= KaiBadSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Kai1Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Kai 1 Buzzer')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times to 1 Buzzer Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= Kai1Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Kai2Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Kai 2 Buzzers')
plt.hist(KaiControl, alpha = 0.5, color = 'green', density=True, label = 'Kai Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Kai's Reaction Times to 2 Buzzers Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = KaiControl[lowerindex:upperindex]
second_data= Kai2Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(HunterLight, alpha = 0.5, color = 'red', density=True, label = 'Hunter Light Room')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times In a Brightly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = HunterControl[lowerindex:upperindex]
second_data= HunterLight[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(HunterDark, alpha = 0.5, color = 'red', density=True, label = 'Hunter Dark Room')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times In a Darkly Lit Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = HunterControl[lowerindex:upperindex]
second_data= HunterDark[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(HunterGoodSmell, alpha = 0.5, color = 'red', density=True, label = 'Hunter Good Smell')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times In a Pleasantly Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = HunterControl[lowerindex:upperindex]
second_data= HunterGoodSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(HunterBadSmell, alpha = 0.5, color = 'red', density=True, label = 'Hunter Bad Smell')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times In a Foul Smelling Room Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = HunterControl[lowerindex:upperindex]
second_data= HunterBadSmell[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Hunter1Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Hunter 1 Buzzer')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times to 1 Buzzer Against a Control")

#Optional: try to add legend to the plot
plt.legend()

first_data = HunterControl[lowerindex:upperindex]
second_data= Hunter1Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

# density=True makes the probability

#plot histograms on the same plot, remember to include alpha number and color in the plotting code
plt.hist(Hunter2Buzzer, alpha = 0.5, color = 'red', density=True, label = 'Hunter 2 Buzzer')
plt.hist(HunterControl, alpha = 0.5, color = 'green', density=True, label = 'Hunter Control')

#add title, x axis lable, y axis lable in the plot
plt.xlabel("reaction time (ms)")
plt.ylabel("probability")
plt.title("Histograms of Hunter's Reaction Times to 2 Buzzers Against a Control")

#Optional: try to add legend to the plot
plt.legend()

upperindex = 90
first_data = HunterControl[lowerindex:upperindex]
second_data= Hunter2Buzzer[lowerindex:upperindex]

from scipy import stats

t_value,p_value=stats.ttest_rel(first_data,second_data)

one_tailed_p_value=float("{:.6f}".format(p_value/2))

print('Test statistic is %f'%float("{:.6f}".format(t_value)))

print('p-value for one_tailed_test is %f'%one_tailed_p_value)

alpha = 0.05

if one_tailed_p_value<=alpha:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'<','alpha(=%.2f)'%alpha,'''We reject the null hypothesis H0.

So we conclude that the environmental change affected reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

else:

    print('Conclusion','n','Since p-value(=%f)'%one_tailed_p_value,'>','alpha(=%.2f)'%alpha,'''We do not reject the null hypothesis H0.

So we conclude that the environmental change did not affect reaction time. i.e., d = 0 at %.2f level of significance.'''%alpha)

print("Average Hunter2Buzzer is " + str(BadSmell_stdev))